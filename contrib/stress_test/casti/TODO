GOAL:
- make a test for neoip-webpack
  - testing casto/casti and oload
  - stress test + running test, both launchable by makefile
- both on the same code base with != parameter
*************************************************************************
how to write the test:
- start a node-chargen in 127.0.0.1 8124
- create N casti_ctrl pointing on this node-chargen
  - wait until they are all published
  - if it goes unpublish later, report a failure
  - TODO in casti_ctrl give a state. ispublished/nopublished
- check that node-chargen got the proper number of connection
  - nb cast
- create M http client to casto reading each of those streams
  - exit when X size unit has been received
- when all M casto client got their units, the test is over
-----------------
- for stress test, just use much bigger numbers
  - set for the neoip_cast_tester cmdline
  - launched from Makefile
  - make test
  - make stress_test
- LATER: support multiple neoip-casto/neoip-casti instances
********************************************************************************
- make a casti_ctrl_t
- write a test tool which controls the number of stream and number of clients per stream.
  - such a tool will give working test + stress test
  - how to check casto client is receiving the proper data
- node-chargen provides the source of the stream
- documents casti call url in a man page
**********************************************************************
casti_ctrl_t:
- look in book how to write such object
- ctor(opts, callback)
  - opts contains all url options
  - what about the refresh period ? in the same or in another ?
  - callback(error, cast_privhash)
- is_started()
- start()
- stop()
- dtor() = if is_started() then stop()
*************************************************************************
casto_testclient_t:
- used for test and to hold knowledge on how to code a client, so all options
  must be available
- ctor(opts, callback)
  - callback(error)
  - opts = {
	cast_privhash
	cast_name
    }
- how to test proper data are received and received in time
  - meanwhile just print it
